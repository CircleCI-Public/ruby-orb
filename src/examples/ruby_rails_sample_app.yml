description: |
  Build and test a full Ruby Rails application with a Postgres database using RSpec.
  View the full sample application source: https://github.com/CircleCI-Public/circleci-demo-ruby-rails/
usage:
  version: 2.1
  orbs:
    ruby: circleci/ruby@x.y # use the latest Ruby orb version
    node: circleci/node@x.y # use the latest Nodeorb version
  jobs:
    build:
      docker:
        - image: cimg/ruby:2.7-node
      steps:
        - checkout
        - ruby/install-deps
        # Store bundle cache
        - node/install-packages:
            pkg-manager: yarn
            cache-key: "yarn.lock"
    checking:
      docker:
        - image: cimg/ruby:2.7-node
      steps:
        - checkout
        - ruby/install-deps
        - ruby/rubocop-check:
            label: "Inspecting with Rubocop"
            format: progress

    test:
      parallelism: 3 # OPTIONAL: Split and run your tests in parallel
      docker:
        - image: cimg/ruby:2.7-node
        - image: circleci/postgres:9.5-alpine
          environment:
            POSTGRES_USER: circleci-demo-ruby
            POSTGRES_DB: rails_blog_test
            POSTGRES_PASSWORD: ""
      environment:
        BUNDLE_JOBS: "3"
        BUNDLE_RETRY: "3"
        PGHOST: 127.0.0.1
        PGUSER: circleci-demo-ruby
        PGPASSWORD: ""
        RAILS_ENV: test
      steps:
        - checkout
        - ruby/install-deps
        - node/install-packages:
            pkg-manager: yarn
            cache-key: "yarn.lock"
        - run:
            name: Wait for DB
            command: dockerize -wait tcp://localhost:5432 -timeout 1m
        - run:
            name: Database setup
            command: bundle exec rails db:schema:load --trace
        # Run rspec in parallel
        - ruby/rspec-test:
            include: "spec/**/*_spec.rb"
  workflows:
    build_and_test:
      jobs:
        - build
        - checking
        - test:
            requires:
              - build
